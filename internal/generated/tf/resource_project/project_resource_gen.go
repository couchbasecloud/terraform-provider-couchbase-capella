// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_project

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ProjectResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"audit": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The RFC3339 timestamp associated with when the resource was initially\ncreated.\n",
						MarkdownDescription: "The RFC3339 timestamp associated with when the resource was initially\ncreated.\n",
					},
					"created_by": schema.StringAttribute{
						Computed:            true,
						Description:         "The user who created the resource; this will be a UUID4 ID for standard\nusers and will be a string such as \"internal-support\" for internal\nCouchbase support users.\n",
						MarkdownDescription: "The user who created the resource; this will be a UUID4 ID for standard\nusers and will be a string such as \"internal-support\" for internal\nCouchbase support users.\n",
					},
					"modified_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The RFC3339 timestamp associated with when the resource was last modified.\n",
						MarkdownDescription: "The RFC3339 timestamp associated with when the resource was last modified.\n",
					},
					"modified_by": schema.StringAttribute{
						Computed:            true,
						Description:         "The user who last modified the resource; this will be a UUID4 ID for\nstandard users and wilmal be a string such as \"internal-support\" for\ninternal Couchbase support users.\n",
						MarkdownDescription: "The user who last modified the resource; this will be a UUID4 ID for\nstandard users and wilmal be a string such as \"internal-support\" for\ninternal Couchbase support users.\n",
					},
					"version": schema.Int64Attribute{
						Computed:            true,
						Description:         "The version of the document. This value is incremented each time the\nresource is modified.\n",
						MarkdownDescription: "The version of the document. This value is incremented each time the\nresource is modified.\n",
					},
				},
				CustomType: AuditType{
					ObjectType: types.ObjectType{
						AttrTypes: AuditValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A short description of the project (up to 256 characters).",
				MarkdownDescription: "A short description of the project (up to 256 characters).",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the project created.",
				MarkdownDescription: "The ID of the project created.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the project (up to 128 characters).",
				MarkdownDescription: "The name of the project (up to 128 characters).",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(128),
				},
			},
			"organization_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The GUID4 ID of the organization.\n",
				MarkdownDescription: "The GUID4 ID of the organization.\n",
			},
			"project_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The GUID4 ID of the project.",
				MarkdownDescription: "The GUID4 ID of the project.",
			},
		},
	}
}

type ProjectModel struct {
	Audit          AuditValue   `tfsdk:"audit"`
	Description    types.String `tfsdk:"description"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	ProjectId      types.String `tfsdk:"project_id"`
}

var _ basetypes.ObjectTypable = AuditType{}

type AuditType struct {
	basetypes.ObjectType
}

func (t AuditType) Equal(o attr.Type) bool {
	other, ok := o.(AuditType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuditType) String() string {
	return "AuditType"
}

func (t AuditType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return nil, diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return nil, diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.StringValue, was: %T`, modifiedAtAttribute))
	}

	modifiedByAttribute, ok := attributes["modified_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_by is missing from object`)

		return nil, diags
	}

	modifiedByVal, ok := modifiedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_by expected to be basetypes.StringValue, was: %T`, modifiedByAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuditValue{
		CreatedAt:  createdAtVal,
		CreatedBy:  createdByVal,
		ModifiedAt: modifiedAtVal,
		ModifiedBy: modifiedByVal,
		Version:    versionVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuditValueNull() AuditValue {
	return AuditValue{
		state: attr.ValueStateNull,
	}
}

func NewAuditValueUnknown() AuditValue {
	return AuditValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuditValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuditValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuditValue Attribute Value",
				"While creating a AuditValue value, a missing attribute value was detected. "+
					"A AuditValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuditValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuditValue Attribute Type",
				"While creating a AuditValue value, an invalid attribute value was detected. "+
					"A AuditValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuditValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuditValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuditValue Attribute Value",
				"While creating a AuditValue value, an extra attribute value was detected. "+
					"A AuditValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuditValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuditValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.StringValue, was: %T`, modifiedAtAttribute))
	}

	modifiedByAttribute, ok := attributes["modified_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_by is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	modifiedByVal, ok := modifiedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_by expected to be basetypes.StringValue, was: %T`, modifiedByAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewAuditValueUnknown(), diags
	}

	return AuditValue{
		CreatedAt:  createdAtVal,
		CreatedBy:  createdByVal,
		ModifiedAt: modifiedAtVal,
		ModifiedBy: modifiedByVal,
		Version:    versionVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuditValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuditValue {
	object, diags := NewAuditValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuditValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuditType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuditValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuditValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuditValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuditValueMust(AuditValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuditType) ValueType(ctx context.Context) attr.Value {
	return AuditValue{}
}

var _ basetypes.ObjectValuable = AuditValue{}

type AuditValue struct {
	CreatedAt  basetypes.StringValue `tfsdk:"created_at"`
	CreatedBy  basetypes.StringValue `tfsdk:"created_by"`
	ModifiedAt basetypes.StringValue `tfsdk:"modified_at"`
	ModifiedBy basetypes.StringValue `tfsdk:"modified_by"`
	Version    basetypes.Int64Value  `tfsdk:"version"`
	state      attr.ValueState
}

func (v AuditValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CreatedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by"] = val

		val, err = v.ModifiedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_at"] = val

		val, err = v.ModifiedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_by"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuditValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuditValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuditValue) String() string {
	return "AuditValue"
}

func (v AuditValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"created_by":  basetypes.StringType{},
		"modified_at": basetypes.StringType{},
		"modified_by": basetypes.StringType{},
		"version":     basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":  v.CreatedAt,
			"created_by":  v.CreatedBy,
			"modified_at": v.ModifiedAt,
			"modified_by": v.ModifiedBy,
			"version":     v.Version,
		})

	return objVal, diags
}

func (v AuditValue) Equal(o attr.Value) bool {
	other, ok := o.(AuditValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CreatedBy.Equal(other.CreatedBy) {
		return false
	}

	if !v.ModifiedAt.Equal(other.ModifiedAt) {
		return false
	}

	if !v.ModifiedBy.Equal(other.ModifiedBy) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v AuditValue) Type(ctx context.Context) attr.Type {
	return AuditType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuditValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"created_by":  basetypes.StringType{},
		"modified_at": basetypes.StringType{},
		"modified_by": basetypes.StringType{},
		"version":     basetypes.Int64Type{},
	}
}
