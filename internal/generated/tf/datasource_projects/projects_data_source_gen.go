// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_projects

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ProjectsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cursor": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"hrefs": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"first": schema.StringAttribute{
								Computed:            true,
								Description:         "The base URL, endpoint, and path parameters required to fetch the first page of results.",
								MarkdownDescription: "The base URL, endpoint, and path parameters required to fetch the first page of results.",
							},
							"last": schema.StringAttribute{
								Computed:            true,
								Description:         "The base URL, endpoint, and path parameters required to fetch the last page of results.",
								MarkdownDescription: "The base URL, endpoint, and path parameters required to fetch the last page of results.",
							},
							"next": schema.StringAttribute{
								Computed:            true,
								Description:         "The base URL, endpoint, and path parameters required to fetch the next page of results.\nEmpty if there is no next page.\n",
								MarkdownDescription: "The base URL, endpoint, and path parameters required to fetch the next page of results.\nEmpty if there is no next page.\n",
							},
							"previous": schema.StringAttribute{
								Computed:            true,
								Description:         "The base URL, endpoint, and path parameters required to fetch the previous page of results.\nEmpty if there is no previous page.\n",
								MarkdownDescription: "The base URL, endpoint, and path parameters required to fetch the previous page of results.\nEmpty if there is no previous page.\n",
							},
						},
						CustomType: HrefsType{
							ObjectType: types.ObjectType{
								AttrTypes: HrefsValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"pages": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"last": schema.Int64Attribute{
								Computed:            true,
								Description:         "Number of the last page of results.",
								MarkdownDescription: "Number of the last page of results.",
							},
							"next": schema.Int64Attribute{
								Computed:            true,
								Description:         "Number of the next page of results. Not set on the last page.\n",
								MarkdownDescription: "Number of the next page of results. Not set on the last page.\n",
							},
							"page": schema.Int64Attribute{
								Computed:            true,
								Description:         "Current page of results, starting from page 1.",
								MarkdownDescription: "Current page of results, starting from page 1.",
							},
							"per_page": schema.Int64Attribute{
								Computed:            true,
								Description:         "Number of items displayed in each page.",
								MarkdownDescription: "Number of items displayed in each page.",
							},
							"previous": schema.Int64Attribute{
								Computed:            true,
								Description:         "Number of the previous page of results. Not set on the first page.\n",
								MarkdownDescription: "Number of the previous page of results. Not set on the first page.\n",
							},
							"total_items": schema.Int64Attribute{
								Computed:            true,
								Description:         "Total items found by the given query.",
								MarkdownDescription: "Total items found by the given query.",
							},
						},
						CustomType: PagesType{
							ObjectType: types.ObjectType{
								AttrTypes: PagesValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
				},
				CustomType: CursorType{
					ObjectType: types.ObjectType{
						AttrTypes: CursorValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"data": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"audit": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed:            true,
									Description:         "The RFC3339 timestamp associated with when the resource was initially\ncreated.\n",
									MarkdownDescription: "The RFC3339 timestamp associated with when the resource was initially\ncreated.\n",
								},
								"created_by": schema.StringAttribute{
									Computed:            true,
									Description:         "The user who created the resource; this will be a UUID4 ID for standard\nusers and will be a string such as \"internal-support\" for internal\nCouchbase support users.\n",
									MarkdownDescription: "The user who created the resource; this will be a UUID4 ID for standard\nusers and will be a string such as \"internal-support\" for internal\nCouchbase support users.\n",
								},
								"modified_at": schema.StringAttribute{
									Computed:            true,
									Description:         "The RFC3339 timestamp associated with when the resource was last modified.\n",
									MarkdownDescription: "The RFC3339 timestamp associated with when the resource was last modified.\n",
								},
								"modified_by": schema.StringAttribute{
									Computed:            true,
									Description:         "The user who last modified the resource; this will be a UUID4 ID for\nstandard users and wilmal be a string such as \"internal-support\" for\ninternal Couchbase support users.\n",
									MarkdownDescription: "The user who last modified the resource; this will be a UUID4 ID for\nstandard users and wilmal be a string such as \"internal-support\" for\ninternal Couchbase support users.\n",
								},
								"version": schema.Int64Attribute{
									Computed:            true,
									Description:         "The version of the document. This value is incremented each time the\nresource is modified.\n",
									MarkdownDescription: "The version of the document. This value is incremented each time the\nresource is modified.\n",
								},
							},
							CustomType: AuditType{
								ObjectType: types.ObjectType{
									AttrTypes: AuditValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of a particular project.",
							MarkdownDescription: "The description of a particular project.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "A GUID4 identifier of the project.",
							MarkdownDescription: "A GUID4 identifier of the project.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the project.",
							MarkdownDescription: "The name of the project.",
						},
					},
					CustomType: DataType{
						ObjectType: types.ObjectType{
							AttrTypes: DataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The GUID4 ID of the organization.\n",
				MarkdownDescription: "The GUID4 ID of the organization.\n",
			},
			"page": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Sets the page you would like to view.",
				MarkdownDescription: "Sets the page you would like to view.",
			},
			"per_page": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Sets the number of results you would like to have on each page.",
				MarkdownDescription: "Sets the number of results you would like to have on each page.",
			},
			"sort_by": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Sets the order of how you would like to sort the results and the key you would like to order by. Valid fields to sort the results are: **id**, **name**.",
				MarkdownDescription: "Sets the order of how you would like to sort the results and the key you would like to order by. Valid fields to sort the results are: **id**, **name**.",
			},
			"sort_direction": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The order in which the items will be sorted.",
				MarkdownDescription: "The order in which the items will be sorted.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"asc",
						"desc",
					),
				},
			},
		},
	}
}

type ProjectsModel struct {
	Cursor         CursorValue  `tfsdk:"cursor"`
	Data           types.List   `tfsdk:"data"`
	OrganizationId types.String `tfsdk:"organization_id"`
	Page           types.Int64  `tfsdk:"page"`
	PerPage        types.Int64  `tfsdk:"per_page"`
	SortBy         types.List   `tfsdk:"sort_by"`
	SortDirection  types.String `tfsdk:"sort_direction"`
}

var _ basetypes.ObjectTypable = CursorType{}

type CursorType struct {
	basetypes.ObjectType
}

func (t CursorType) Equal(o attr.Type) bool {
	other, ok := o.(CursorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CursorType) String() string {
	return "CursorType"
}

func (t CursorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	hrefsAttribute, ok := attributes["hrefs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hrefs is missing from object`)

		return nil, diags
	}

	hrefsVal, ok := hrefsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hrefs expected to be basetypes.ObjectValue, was: %T`, hrefsAttribute))
	}

	pagesAttribute, ok := attributes["pages"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pages is missing from object`)

		return nil, diags
	}

	pagesVal, ok := pagesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pages expected to be basetypes.ObjectValue, was: %T`, pagesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CursorValue{
		Hrefs: hrefsVal,
		Pages: pagesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCursorValueNull() CursorValue {
	return CursorValue{
		state: attr.ValueStateNull,
	}
}

func NewCursorValueUnknown() CursorValue {
	return CursorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCursorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CursorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CursorValue Attribute Value",
				"While creating a CursorValue value, a missing attribute value was detected. "+
					"A CursorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CursorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CursorValue Attribute Type",
				"While creating a CursorValue value, an invalid attribute value was detected. "+
					"A CursorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CursorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CursorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CursorValue Attribute Value",
				"While creating a CursorValue value, an extra attribute value was detected. "+
					"A CursorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CursorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCursorValueUnknown(), diags
	}

	hrefsAttribute, ok := attributes["hrefs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hrefs is missing from object`)

		return NewCursorValueUnknown(), diags
	}

	hrefsVal, ok := hrefsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hrefs expected to be basetypes.ObjectValue, was: %T`, hrefsAttribute))
	}

	pagesAttribute, ok := attributes["pages"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pages is missing from object`)

		return NewCursorValueUnknown(), diags
	}

	pagesVal, ok := pagesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pages expected to be basetypes.ObjectValue, was: %T`, pagesAttribute))
	}

	if diags.HasError() {
		return NewCursorValueUnknown(), diags
	}

	return CursorValue{
		Hrefs: hrefsVal,
		Pages: pagesVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCursorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CursorValue {
	object, diags := NewCursorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCursorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CursorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCursorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCursorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCursorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCursorValueMust(CursorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CursorType) ValueType(ctx context.Context) attr.Value {
	return CursorValue{}
}

var _ basetypes.ObjectValuable = CursorValue{}

type CursorValue struct {
	Hrefs basetypes.ObjectValue `tfsdk:"hrefs"`
	Pages basetypes.ObjectValue `tfsdk:"pages"`
	state attr.ValueState
}

func (v CursorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["hrefs"] = basetypes.ObjectType{
		AttrTypes: HrefsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["pages"] = basetypes.ObjectType{
		AttrTypes: PagesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Hrefs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hrefs"] = val

		val, err = v.Pages.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pages"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CursorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CursorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CursorValue) String() string {
	return "CursorValue"
}

func (v CursorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var hrefs basetypes.ObjectValue

	if v.Hrefs.IsNull() {
		hrefs = types.ObjectNull(
			HrefsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Hrefs.IsUnknown() {
		hrefs = types.ObjectUnknown(
			HrefsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Hrefs.IsNull() && !v.Hrefs.IsUnknown() {
		hrefs = types.ObjectValueMust(
			HrefsValue{}.AttributeTypes(ctx),
			v.Hrefs.Attributes(),
		)
	}

	var pages basetypes.ObjectValue

	if v.Pages.IsNull() {
		pages = types.ObjectNull(
			PagesValue{}.AttributeTypes(ctx),
		)
	}

	if v.Pages.IsUnknown() {
		pages = types.ObjectUnknown(
			PagesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Pages.IsNull() && !v.Pages.IsUnknown() {
		pages = types.ObjectValueMust(
			PagesValue{}.AttributeTypes(ctx),
			v.Pages.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"hrefs": basetypes.ObjectType{
			AttrTypes: HrefsValue{}.AttributeTypes(ctx),
		},
		"pages": basetypes.ObjectType{
			AttrTypes: PagesValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"hrefs": hrefs,
			"pages": pages,
		})

	return objVal, diags
}

func (v CursorValue) Equal(o attr.Value) bool {
	other, ok := o.(CursorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Hrefs.Equal(other.Hrefs) {
		return false
	}

	if !v.Pages.Equal(other.Pages) {
		return false
	}

	return true
}

func (v CursorValue) Type(ctx context.Context) attr.Type {
	return CursorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CursorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"hrefs": basetypes.ObjectType{
			AttrTypes: HrefsValue{}.AttributeTypes(ctx),
		},
		"pages": basetypes.ObjectType{
			AttrTypes: PagesValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = HrefsType{}

type HrefsType struct {
	basetypes.ObjectType
}

func (t HrefsType) Equal(o attr.Type) bool {
	other, ok := o.(HrefsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HrefsType) String() string {
	return "HrefsType"
}

func (t HrefsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	firstAttribute, ok := attributes["first"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`first is missing from object`)

		return nil, diags
	}

	firstVal, ok := firstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`first expected to be basetypes.StringValue, was: %T`, firstAttribute))
	}

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return nil, diags
	}

	lastVal, ok := lastAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.StringValue, was: %T`, lastAttribute))
	}

	nextAttribute, ok := attributes["next"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next is missing from object`)

		return nil, diags
	}

	nextVal, ok := nextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next expected to be basetypes.StringValue, was: %T`, nextAttribute))
	}

	previousAttribute, ok := attributes["previous"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous is missing from object`)

		return nil, diags
	}

	previousVal, ok := previousAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous expected to be basetypes.StringValue, was: %T`, previousAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HrefsValue{
		First:    firstVal,
		Last:     lastVal,
		Next:     nextVal,
		Previous: previousVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewHrefsValueNull() HrefsValue {
	return HrefsValue{
		state: attr.ValueStateNull,
	}
}

func NewHrefsValueUnknown() HrefsValue {
	return HrefsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHrefsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HrefsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HrefsValue Attribute Value",
				"While creating a HrefsValue value, a missing attribute value was detected. "+
					"A HrefsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HrefsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HrefsValue Attribute Type",
				"While creating a HrefsValue value, an invalid attribute value was detected. "+
					"A HrefsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HrefsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HrefsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HrefsValue Attribute Value",
				"While creating a HrefsValue value, an extra attribute value was detected. "+
					"A HrefsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HrefsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHrefsValueUnknown(), diags
	}

	firstAttribute, ok := attributes["first"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`first is missing from object`)

		return NewHrefsValueUnknown(), diags
	}

	firstVal, ok := firstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`first expected to be basetypes.StringValue, was: %T`, firstAttribute))
	}

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return NewHrefsValueUnknown(), diags
	}

	lastVal, ok := lastAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.StringValue, was: %T`, lastAttribute))
	}

	nextAttribute, ok := attributes["next"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next is missing from object`)

		return NewHrefsValueUnknown(), diags
	}

	nextVal, ok := nextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next expected to be basetypes.StringValue, was: %T`, nextAttribute))
	}

	previousAttribute, ok := attributes["previous"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous is missing from object`)

		return NewHrefsValueUnknown(), diags
	}

	previousVal, ok := previousAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous expected to be basetypes.StringValue, was: %T`, previousAttribute))
	}

	if diags.HasError() {
		return NewHrefsValueUnknown(), diags
	}

	return HrefsValue{
		First:    firstVal,
		Last:     lastVal,
		Next:     nextVal,
		Previous: previousVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewHrefsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HrefsValue {
	object, diags := NewHrefsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHrefsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HrefsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHrefsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHrefsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHrefsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHrefsValueMust(HrefsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HrefsType) ValueType(ctx context.Context) attr.Value {
	return HrefsValue{}
}

var _ basetypes.ObjectValuable = HrefsValue{}

type HrefsValue struct {
	First    basetypes.StringValue `tfsdk:"first"`
	Last     basetypes.StringValue `tfsdk:"last"`
	Next     basetypes.StringValue `tfsdk:"next"`
	Previous basetypes.StringValue `tfsdk:"previous"`
	state    attr.ValueState
}

func (v HrefsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["first"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["next"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["previous"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.First.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["first"] = val

		val, err = v.Last.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last"] = val

		val, err = v.Next.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["next"] = val

		val, err = v.Previous.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["previous"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HrefsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HrefsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HrefsValue) String() string {
	return "HrefsValue"
}

func (v HrefsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"first":    basetypes.StringType{},
		"last":     basetypes.StringType{},
		"next":     basetypes.StringType{},
		"previous": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"first":    v.First,
			"last":     v.Last,
			"next":     v.Next,
			"previous": v.Previous,
		})

	return objVal, diags
}

func (v HrefsValue) Equal(o attr.Value) bool {
	other, ok := o.(HrefsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.First.Equal(other.First) {
		return false
	}

	if !v.Last.Equal(other.Last) {
		return false
	}

	if !v.Next.Equal(other.Next) {
		return false
	}

	if !v.Previous.Equal(other.Previous) {
		return false
	}

	return true
}

func (v HrefsValue) Type(ctx context.Context) attr.Type {
	return HrefsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HrefsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"first":    basetypes.StringType{},
		"last":     basetypes.StringType{},
		"next":     basetypes.StringType{},
		"previous": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PagesType{}

type PagesType struct {
	basetypes.ObjectType
}

func (t PagesType) Equal(o attr.Type) bool {
	other, ok := o.(PagesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PagesType) String() string {
	return "PagesType"
}

func (t PagesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return nil, diags
	}

	lastVal, ok := lastAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.Int64Value, was: %T`, lastAttribute))
	}

	nextAttribute, ok := attributes["next"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next is missing from object`)

		return nil, diags
	}

	nextVal, ok := nextAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next expected to be basetypes.Int64Value, was: %T`, nextAttribute))
	}

	pageAttribute, ok := attributes["page"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page is missing from object`)

		return nil, diags
	}

	pageVal, ok := pageAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page expected to be basetypes.Int64Value, was: %T`, pageAttribute))
	}

	perPageAttribute, ok := attributes["per_page"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`per_page is missing from object`)

		return nil, diags
	}

	perPageVal, ok := perPageAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`per_page expected to be basetypes.Int64Value, was: %T`, perPageAttribute))
	}

	previousAttribute, ok := attributes["previous"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous is missing from object`)

		return nil, diags
	}

	previousVal, ok := previousAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous expected to be basetypes.Int64Value, was: %T`, previousAttribute))
	}

	totalItemsAttribute, ok := attributes["total_items"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_items is missing from object`)

		return nil, diags
	}

	totalItemsVal, ok := totalItemsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_items expected to be basetypes.Int64Value, was: %T`, totalItemsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PagesValue{
		Last:       lastVal,
		Next:       nextVal,
		Page:       pageVal,
		PerPage:    perPageVal,
		Previous:   previousVal,
		TotalItems: totalItemsVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPagesValueNull() PagesValue {
	return PagesValue{
		state: attr.ValueStateNull,
	}
}

func NewPagesValueUnknown() PagesValue {
	return PagesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPagesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PagesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PagesValue Attribute Value",
				"While creating a PagesValue value, a missing attribute value was detected. "+
					"A PagesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PagesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PagesValue Attribute Type",
				"While creating a PagesValue value, an invalid attribute value was detected. "+
					"A PagesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PagesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PagesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PagesValue Attribute Value",
				"While creating a PagesValue value, an extra attribute value was detected. "+
					"A PagesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PagesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPagesValueUnknown(), diags
	}

	lastAttribute, ok := attributes["last"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	lastVal, ok := lastAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last expected to be basetypes.Int64Value, was: %T`, lastAttribute))
	}

	nextAttribute, ok := attributes["next"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	nextVal, ok := nextAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next expected to be basetypes.Int64Value, was: %T`, nextAttribute))
	}

	pageAttribute, ok := attributes["page"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	pageVal, ok := pageAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page expected to be basetypes.Int64Value, was: %T`, pageAttribute))
	}

	perPageAttribute, ok := attributes["per_page"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`per_page is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	perPageVal, ok := perPageAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`per_page expected to be basetypes.Int64Value, was: %T`, perPageAttribute))
	}

	previousAttribute, ok := attributes["previous"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`previous is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	previousVal, ok := previousAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`previous expected to be basetypes.Int64Value, was: %T`, previousAttribute))
	}

	totalItemsAttribute, ok := attributes["total_items"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_items is missing from object`)

		return NewPagesValueUnknown(), diags
	}

	totalItemsVal, ok := totalItemsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_items expected to be basetypes.Int64Value, was: %T`, totalItemsAttribute))
	}

	if diags.HasError() {
		return NewPagesValueUnknown(), diags
	}

	return PagesValue{
		Last:       lastVal,
		Next:       nextVal,
		Page:       pageVal,
		PerPage:    perPageVal,
		Previous:   previousVal,
		TotalItems: totalItemsVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPagesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PagesValue {
	object, diags := NewPagesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPagesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PagesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPagesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPagesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPagesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPagesValueMust(PagesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PagesType) ValueType(ctx context.Context) attr.Value {
	return PagesValue{}
}

var _ basetypes.ObjectValuable = PagesValue{}

type PagesValue struct {
	Last       basetypes.Int64Value `tfsdk:"last"`
	Next       basetypes.Int64Value `tfsdk:"next"`
	Page       basetypes.Int64Value `tfsdk:"page"`
	PerPage    basetypes.Int64Value `tfsdk:"per_page"`
	Previous   basetypes.Int64Value `tfsdk:"previous"`
	TotalItems basetypes.Int64Value `tfsdk:"total_items"`
	state      attr.ValueState
}

func (v PagesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["last"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["next"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["page"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["per_page"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["previous"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["total_items"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Last.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last"] = val

		val, err = v.Next.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["next"] = val

		val, err = v.Page.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["page"] = val

		val, err = v.PerPage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["per_page"] = val

		val, err = v.Previous.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["previous"] = val

		val, err = v.TotalItems.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total_items"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PagesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PagesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PagesValue) String() string {
	return "PagesValue"
}

func (v PagesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"last":        basetypes.Int64Type{},
		"next":        basetypes.Int64Type{},
		"page":        basetypes.Int64Type{},
		"per_page":    basetypes.Int64Type{},
		"previous":    basetypes.Int64Type{},
		"total_items": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"last":        v.Last,
			"next":        v.Next,
			"page":        v.Page,
			"per_page":    v.PerPage,
			"previous":    v.Previous,
			"total_items": v.TotalItems,
		})

	return objVal, diags
}

func (v PagesValue) Equal(o attr.Value) bool {
	other, ok := o.(PagesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Last.Equal(other.Last) {
		return false
	}

	if !v.Next.Equal(other.Next) {
		return false
	}

	if !v.Page.Equal(other.Page) {
		return false
	}

	if !v.PerPage.Equal(other.PerPage) {
		return false
	}

	if !v.Previous.Equal(other.Previous) {
		return false
	}

	if !v.TotalItems.Equal(other.TotalItems) {
		return false
	}

	return true
}

func (v PagesValue) Type(ctx context.Context) attr.Type {
	return PagesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PagesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"last":        basetypes.Int64Type{},
		"next":        basetypes.Int64Type{},
		"page":        basetypes.Int64Type{},
		"per_page":    basetypes.Int64Type{},
		"previous":    basetypes.Int64Type{},
		"total_items": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = DataType{}

type DataType struct {
	basetypes.ObjectType
}

func (t DataType) Equal(o attr.Type) bool {
	other, ok := o.(DataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DataType) String() string {
	return "DataType"
}

func (t DataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	auditAttribute, ok := attributes["audit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`audit is missing from object`)

		return nil, diags
	}

	auditVal, ok := auditAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`audit expected to be basetypes.ObjectValue, was: %T`, auditAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DataValue{
		Audit:       auditVal,
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDataValueNull() DataValue {
	return DataValue{
		state: attr.ValueStateNull,
	}
}

func NewDataValueUnknown() DataValue {
	return DataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DataValue Attribute Value",
				"While creating a DataValue value, a missing attribute value was detected. "+
					"A DataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DataValue Attribute Type",
				"While creating a DataValue value, an invalid attribute value was detected. "+
					"A DataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DataValue Attribute Value",
				"While creating a DataValue value, an extra attribute value was detected. "+
					"A DataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	auditAttribute, ok := attributes["audit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`audit is missing from object`)

		return NewDataValueUnknown(), diags
	}

	auditVal, ok := auditAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`audit expected to be basetypes.ObjectValue, was: %T`, auditAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewDataValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewDataValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewDataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	return DataValue{
		Audit:       auditVal,
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DataValue {
	object, diags := NewDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDataValueMust(DataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DataType) ValueType(ctx context.Context) attr.Value {
	return DataValue{}
}

var _ basetypes.ObjectValuable = DataValue{}

type DataValue struct {
	Audit       basetypes.ObjectValue `tfsdk:"audit"`
	Description basetypes.StringValue `tfsdk:"description"`
	Id          basetypes.StringValue `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v DataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["audit"] = basetypes.ObjectType{
		AttrTypes: AuditValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Audit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["audit"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DataValue) String() string {
	return "DataValue"
}

func (v DataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var audit basetypes.ObjectValue

	if v.Audit.IsNull() {
		audit = types.ObjectNull(
			AuditValue{}.AttributeTypes(ctx),
		)
	}

	if v.Audit.IsUnknown() {
		audit = types.ObjectUnknown(
			AuditValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Audit.IsNull() && !v.Audit.IsUnknown() {
		audit = types.ObjectValueMust(
			AuditValue{}.AttributeTypes(ctx),
			v.Audit.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"audit": basetypes.ObjectType{
			AttrTypes: AuditValue{}.AttributeTypes(ctx),
		},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"audit":       audit,
			"description": v.Description,
			"id":          v.Id,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v DataValue) Equal(o attr.Value) bool {
	other, ok := o.(DataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Audit.Equal(other.Audit) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v DataValue) Type(ctx context.Context) attr.Type {
	return DataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"audit": basetypes.ObjectType{
			AttrTypes: AuditValue{}.AttributeTypes(ctx),
		},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AuditType{}

type AuditType struct {
	basetypes.ObjectType
}

func (t AuditType) Equal(o attr.Type) bool {
	other, ok := o.(AuditType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuditType) String() string {
	return "AuditType"
}

func (t AuditType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return nil, diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return nil, diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.StringValue, was: %T`, modifiedAtAttribute))
	}

	modifiedByAttribute, ok := attributes["modified_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_by is missing from object`)

		return nil, diags
	}

	modifiedByVal, ok := modifiedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_by expected to be basetypes.StringValue, was: %T`, modifiedByAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuditValue{
		CreatedAt:  createdAtVal,
		CreatedBy:  createdByVal,
		ModifiedAt: modifiedAtVal,
		ModifiedBy: modifiedByVal,
		Version:    versionVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuditValueNull() AuditValue {
	return AuditValue{
		state: attr.ValueStateNull,
	}
}

func NewAuditValueUnknown() AuditValue {
	return AuditValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuditValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuditValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuditValue Attribute Value",
				"While creating a AuditValue value, a missing attribute value was detected. "+
					"A AuditValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuditValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuditValue Attribute Type",
				"While creating a AuditValue value, an invalid attribute value was detected. "+
					"A AuditValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuditValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuditValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuditValue Attribute Value",
				"While creating a AuditValue value, an extra attribute value was detected. "+
					"A AuditValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuditValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuditValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	modifiedAtAttribute, ok := attributes["modified_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_at is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	modifiedAtVal, ok := modifiedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_at expected to be basetypes.StringValue, was: %T`, modifiedAtAttribute))
	}

	modifiedByAttribute, ok := attributes["modified_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_by is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	modifiedByVal, ok := modifiedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_by expected to be basetypes.StringValue, was: %T`, modifiedByAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewAuditValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewAuditValueUnknown(), diags
	}

	return AuditValue{
		CreatedAt:  createdAtVal,
		CreatedBy:  createdByVal,
		ModifiedAt: modifiedAtVal,
		ModifiedBy: modifiedByVal,
		Version:    versionVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewAuditValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuditValue {
	object, diags := NewAuditValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuditValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuditType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuditValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuditValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuditValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuditValueMust(AuditValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuditType) ValueType(ctx context.Context) attr.Value {
	return AuditValue{}
}

var _ basetypes.ObjectValuable = AuditValue{}

type AuditValue struct {
	CreatedAt  basetypes.StringValue `tfsdk:"created_at"`
	CreatedBy  basetypes.StringValue `tfsdk:"created_by"`
	ModifiedAt basetypes.StringValue `tfsdk:"modified_at"`
	ModifiedBy basetypes.StringValue `tfsdk:"modified_by"`
	Version    basetypes.Int64Value  `tfsdk:"version"`
	state      attr.ValueState
}

func (v AuditValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CreatedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by"] = val

		val, err = v.ModifiedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_at"] = val

		val, err = v.ModifiedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_by"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuditValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuditValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuditValue) String() string {
	return "AuditValue"
}

func (v AuditValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"created_by":  basetypes.StringType{},
		"modified_at": basetypes.StringType{},
		"modified_by": basetypes.StringType{},
		"version":     basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":  v.CreatedAt,
			"created_by":  v.CreatedBy,
			"modified_at": v.ModifiedAt,
			"modified_by": v.ModifiedBy,
			"version":     v.Version,
		})

	return objVal, diags
}

func (v AuditValue) Equal(o attr.Value) bool {
	other, ok := o.(AuditValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CreatedBy.Equal(other.CreatedBy) {
		return false
	}

	if !v.ModifiedAt.Equal(other.ModifiedAt) {
		return false
	}

	if !v.ModifiedBy.Equal(other.ModifiedBy) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v AuditValue) Type(ctx context.Context) attr.Type {
	return AuditType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuditValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"created_by":  basetypes.StringType{},
		"modified_at": basetypes.StringType{},
		"modified_by": basetypes.StringType{},
		"version":     basetypes.Int64Type{},
	}
}
