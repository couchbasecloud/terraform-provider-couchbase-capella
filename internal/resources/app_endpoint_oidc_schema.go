package resources

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

func AppEndpointOidcProviderSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "App Endpoint OpenID Connect Provider Resource",
		Attributes: map[string]schema.Attribute{
			"organization_id":   WithDescription(stringAttribute([]string{required, requiresReplace}, validator.String(stringvalidator.LengthAtLeast(1))), "The GUID4 ID of the Capella organization."),
			"project_id":        WithDescription(stringAttribute([]string{required, requiresReplace}, validator.String(stringvalidator.LengthAtLeast(1))), "The GUID4 ID of the Capella project."),
			"cluster_id":        WithDescription(stringAttribute([]string{required, requiresReplace}, validator.String(stringvalidator.LengthAtLeast(1))), "The GUID4 ID of the Capella cluster."),
			"app_service_id":    WithDescription(stringAttribute([]string{required, requiresReplace}, validator.String(stringvalidator.LengthAtLeast(1))), "The GUID4 ID of the Capella App Service."),
			"app_endpoint_name": WithDescription(stringAttribute([]string{required, requiresReplace}, validator.String(stringvalidator.LengthAtLeast(1))), "The name of the App Endpoint."),
			"client_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: `The OpenID Connect provider client ID.`,
			},
			"discovery_url": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: `The URL for the non-standard discovery endpoint.`,
			},
			"issuer": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: `The URL for the OpenID Connect issuer.`,
			},
			"is_default": schema.BoolAttribute{
				Computed:            true,
				MarkdownDescription: `Indicates whether this is the default OpenID Connect provider for this App Endpoint.`,
			},
			"provider_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The GUID4 ID of this OpenID Connect provider. Generated by the backend on creation.`,
			},
			"register": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: `Indicates whether to register a new App Service user account when a user logs in using OpenID Connect.`,
			},
			"roles_claim": schema.StringAttribute{
				Optional: true,
				MarkdownDescription: `If set, the value(s) of the given OpenID Connect authentication token claim will be added to the user's roles.` + "\n" +
					`The value of this claim in the OIDC token must be either a string or an array of strings, any other type will result in an error.`,
			},
			"user_prefix": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: `Username prefix for all users created for this provider.`,
			},
			"username_claim": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: `Allows a different OpenID Connect field to be specified instead of the Subject (sub).`,
			},
		},
	}
}
